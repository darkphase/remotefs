.TH "remotefs" "7" "0.10" "remotefs" "remotefs"

.SH "General"

Remotefs is a network file system. It was designed for high speed and
will offer a greater performance as some other network file systems.

Network files systems can be designed with different goal. The
network file sytems can follow a sparse model (login based) with
provate mount point, or be designed as a full featured file system
which offer only a common moint point for all users..

A sparse network file system is designed for accessing a directory
from a remote client by a single user, For such file systems there
is not need of advanced features. Sshfs is such a file system. full
featured file systems are well integrated in the client and offer
all functions available from a files system located on the harddrive
attached to the workstation. Nfs, Afs and Glusterfs are example for
such implementations.

Remotefs was primary designed as sparse file system with the goal
to provide a heigth performance and the ability to work well with
network server based on home nas devices.

Remotefs is login based and each user who want to access the 
networkresources provided by remotefs must mount themself the
exported dir. Remotefs is <b>fuse</b> based and offer therefore
the ability to moubnt resources withoit administrator rights.

According to this approach, the authentification and the checks
for access rights is done on the server. An advantage of this
approach is that you can mount the resources provided by the server
from any computer on the world.

In order to reach the performance the data are send unencrypted over
the network. If you want to access a remotefs export via the Internet
you can use the facilities offered by the kernel and for example
racoon an IKE (ISAKMP/Oakley) key management daemon. This made
the use of a kernel with encriptions module necessary. Other programs
as stunnel or ssh allows also to crypt the datas.

Full featured network file systems need normally that the users and
groups are known by all involved systems and the files /etc/passwd
and /etc/group are identical on all systems.

Remotefs is prepared in order to work within well administered little
network (the file /etc/passwd and /etc/group are, at least for the
user accounts, all identical). This allow sharing of a common directory
betwenn different users as for full featured file systems as NFS or
Glusterfs.

within the "local" netwok you can "synchronize" the passwd and group
files by hand or use services as yp (yellowpage) or nis. For a home
network with only a few users, the special services which was
developped for use within large companies are not necessary.

The access from "external" computers, the file /etc/passwd and /etc/group
differ and the username on the client is different from the user name on
the server, is also supported. With this mode the files and directory
on the server will all appear to be owned by the the user on the client
or if the files and directory are not owned by the user with an other
user and or group name found on the client. This is a kind of ID mapping
as offered for a future version of NFSv4 but without the need of
supplementary services.

.SH "Offering directories via the internet"

If you want to access your server from the internet, cryting of the
datas is a nice idea. Remotefs itself don't provide this facility but
there are helper which allow this.

.SS Mount with ssh:

Mounting the remote resource via ssh is not complicated. You need only
2 commands:

\fBssh -L 5001:localhost:5001 user@server -f sleep 10\fP 
.br
\fBrfs -ousername=bob,password=.bob-server localhost:/exports/bob mnt\fP

The first line call the ssh daemon on the server and tell it to redirect
the ethernet traffic send to the local port 5001 (-L 5001:localhost) to
the port 5001 on the server. The "-f sleep 10" option tell ssh to launc
the command "sleep 10" in background. The second command must then be
send before the time (10 sec.) has elapsed.

The second line tell rfs to connect to the local host, the traffic is
taken by the ssh and redirected to the server via the ssh port.
This mean that the ssh port must be reachable from the internet.
If you want to connect via an other port you can instruct ssh and sshd
to do so. refer to the ssh and sshd documentation.

Note that the performance will dramatically decrease.

.SH "Unmounting the remotefs file system"

Unmounting of the private mount point shall be done with the fusermount
utility;
\fBfusermount -u <private mountpoint>\fP

.SH Configuration

See to rfs(1) eg. rfsd(1).

.SH Security

Remotefs is designed to be safe. The oassword is not transfered as
plain text, bit crypted so that people which listen the ethernet traffic
will not be able to find the real password, The password is crypted two
time so that it will be difficult to recover it. If you use a simple
password as for example "secret" the password can be recovered by using
a brute force method. So we recommand to choose a password which avn't be
recovered by trying a lot of password from a dictionnary.

.SH "Common mistakes while using remotefs"

.IP \fB-\fP 2
Use the fuse option allow_other
.br
Access check is done by the server and not by the client, This will allow
other user do access your files with the same permissions as you.
.br
If you really want to allow other users to have an access to your mount point
add the option "default_permissions" to the option "allow_other".
.br
Other users will then have only the read rights, the access control is first
done by the client and then by the server.
.IP \fB-\fP
Use the fuse option direct_io
.br
This option is foreseen for filesystems implemented on an hardrive attached to
the client.

.SH "Author"

Aleksey Tulinov: aleksey_t@users.sourceforge.net
.br
with little contributions from
.br
Jean\-Jacques Sarton: jjsarton@users.sourceforge.net 

.SH "Reporting bugs"
See remotefs project on Sourceforge 

.SH "Copyright"

GNU General Public License (GPL) 

.SH "See also"

rfs(1), rfsd(8), rfspasswd(1)
